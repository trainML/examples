Description: >
  This template deploys the bucket required to store the lambda code for use in deploying the rest of the stack in the next template

Resources:
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  DeploymentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DeploymentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Action: 's3:*'
            Principal: '*'
            Resource:
              - Fn::Join:
                  - ''
                  - - "arn:"
                    - !Ref AWS::Partition
                    - ":s3:::"
                    - !Ref DeploymentBucket
                    - "/*"
              - Fn::Join:
                  - ''
                  - - "arn:"
                    - !Ref AWS::Partition
                    - ":s3:::"
                    - !Ref DeploymentBucket
                    - "/*"
            Condition:
              Bool:
                "aws:SecureTransport": false
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt NewDataWatcherLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn:
        Fn::Join:
          - ''
          - - "arn:"
            - !Ref AWS::Partition
            - ":s3:::"
            - !Ref DataBucket
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
  LambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
            Resource: 
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/trainml-s3-triggered-inference-example-*:*
          - Effect: Allow
            Action:
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/trainml-s3-triggered-inference-example-*:*:*
          - Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameters
              - ssm:GetParameter
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/trainml/*"
          - Effect: Allow
            Action:
              - s3:GetBucketNotification
              - s3:PutObject
              - s3:GetObject
            Resource:
              - Fn::Join:
                  - ''
                  - - "arn:"
                    - !Ref AWS::Partition
                    - ":s3:::"
                    - !Ref DataBucket
                    - "/*"
      Roles:
        - !Ref LambdaExecutionRole
  NewDataWatcherLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            pass
      Runtime: python3.8
      Handler: lambda_function.lambda_handler
      FunctionName: "trainml-s3-triggered-inference-example-data-watcher"
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          TRAINML_CONFIG_DIR: "/tmp"
          TRAINML_USER_PATH: "/trainml/api_user"
          TRAINML_KEY_PATH: "/trainml/api_key"
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
  NewDataWatcherLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /aws/lambda/trainml-s3-triggered-inference-example-data-watcher
      RetentionInDays: 7

